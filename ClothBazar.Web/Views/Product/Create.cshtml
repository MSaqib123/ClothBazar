@model IEnumerable<Category>
@{
    ViewBag.Title = "Create";
}


<form id="createForm">

    <div class="form-horizontal">
        <div class="row">
            <div class="col-md-12">
                <div class="title-section">
                    <h2 class="title">
                        Create Product
                    </h2>
                </div><!-- /.title-section -->
            </div><!-- /.col-md-12 -->
        </div>

        <div class="row">
            <div class="col-8">

                <div class="form-group">
                    <label>Name</label>
                    <input type="text" class="form-control" name="Name" />
                </div>
                <div class="form-group">
                    <label>Description</label>
                    <input type="text" class="form-control" name="Description" />
                </div>

                <div class="form-group">
                    <label>Price</label>
                    <input type="text" class="form-control" name="Price" />
                </div>

                <div class="form-group">
                    <label>Category</label>
                    <select name="CategoryId">
                        <option selected disabled>--- Please SElect Category ---</option>
                        @foreach (var item in Model)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label>Product Image</label>
                    <input id="ImageURL" name="ImageURL" hidden />
                    <input type="file" class="form-control" id="imageUpload" name="Image" accept=".png,.jpg" />
                </div>

                <div class="form-group">
                    <label>IsFeatured ?</label>
                    <input type="checkbox" name="isFeatured" id="checkbox1" value="true" style="display:inline" />
                </div>

                <div class="form-group">
                    <div class="button">
                        <button type="button" id="createBtn" class="btn btn-primary">Create</button>
                        <button type="button" id="cancelBtn" class="btn btn-danger">Cancel</button>
                    </div>
                </div>

            </div>
            <div class="col-4">
                <img id="Image" class="img-fluid" src="~/Content/images/No_Image.jpg" />
            </div>
        </div>

    </div>
</form>

<br />
<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script src="~/Content/Validation/jquery.validate.min.js"></script>
<style>
    .error {
        color: red
    }
</style>

<script>
    //______________  Client Side Validation _________________
    $('#createForm').validate({ // initialize the plugin
        rules: {
            Name: {
                required: true,
                @* email: true *@
                minlength: 5,
                maxlength: 50,
             },
            Description: {
                required: true,
                maxlength: 500
            },
            CategoryId: {
                required: true,
            },
            Price: {
                required: true,
                maxlength: 500
            },
            Image: {
                required: true,
                maxlength: 500
            }
        },
        messages: {
            Name: {
                required: "Name is Required",
                        @* email: true *@
                minlength: "Maximum length is 5",
                maxlength: "Minimum length is 50",
             },
            Description: {
                required: "descripton is Required",
                maxlength: "Minimum length is 500"
            },
            Price: {
                required: "Price is Required",
                maxlength: "Minimum length is 500"
            },
            Image: {
                required: "Image is Required On Product Creating",
                maxlength: "Minimum length is 500"
            }
        }
    });



    //______________ Upload Image _________________

    $("#imageUpload").change(function () {
        var element = this;
        var formData = new FormData();
        var totalFiles = element.files.length;

        for (var i = 0; i < totalFiles; i++) {
            var file = element.files[i];
            formData.append("photo", file);
        }

        $.ajax({
            type: "POST",
            url:'@Url.Action("UploadImage", "Shared")',//"/Shared/UploadImage/",
            data: formData,
            //___ when working with iamge ___
            contentType: false,
            processData: false,
            dataType: "json"
        })
        .done(function (response) {
            console.log(response);

            if (response.Success) {
                $("#Image").attr("src", response.ImageURL);
                $("#ImageURL").val(response.ImageURL);
            }
        })
        .fail(function () {
            //alert("fail");
        })
    })


    //______________  Create Product _________________
    $("#createBtn").click(function () {
        
        @*alert("good");*@
        if ($("#createForm").valid()) {
            $("#createBtn").prop("disabled", true);
            $.ajax({
                type: "POST",
                url: '@Url.Action("Create", "Product")',
                data: $("#createForm").serialize(),
            })
                .done(function (response) {
                    $("#createBtn").prop("disabled", false);
                    $("#tableContainer").html(response);
                    $("#newForm").html("");
                })
                .fail(function () {
                    $("#createBtn").prop("disabled", false);
                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                        didOpen: (toast) => {
                            toast.addEventListener('mouseenter', Swal.stopTimer)
                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                        }
                    })
                    Toast.fire({
                        icon: 'error',
                        title: 'Internal Errors'
                    })
                })
        }
        else {
            $("#createBtn").prop("disabled", false);
            const Toast = Swal.mixin({
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
                didOpen: (toast) => {
                    toast.addEventListener('mouseenter', Swal.stopTimer)
                    toast.addEventListener('mouseleave', Swal.resumeTimer)
                }
            })
            Toast.fire({
                icon: 'error',
                title: 'Invalid Form'
            })
        }
    })


    //______________  Cancel Btn _________________
    $("#cancelBtn").click(function () {
        $("#newForm").html("");
        focusAction("tableContainer");
    })
</script>